from aiogram import types
from aiogram.dispatcher import FSMContext
from keyboards.default import main, polls
from loader import dp
import states

from utils.db_api.database import Poll

@dp.message_handler(text="üì∞ –ú–æ–∏ –æ–ø—Ä–æ—Å—ã")
async def command_my_polls(message: types.Message):
    await message.answer("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –º–æ–∏ –æ–ø—Ä–æ—Å—ã", reply_markup=polls.pollsMenu)

@dp.message_handler(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def command_go_main(message: types.Message):
    await message.answer("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main.mainMenu)

@dp.message_handler(text="üÜï –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å")
async def command_create_poll(message: types.Message):

    await states.create_poll.CreatePoll.name.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞")

@dp.message_handler(text="‚òëÔ∏è –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å")
async def command_menus(message: types.Message):
    await states.take_poll.TakePoll.id.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ ID –æ–ø—Ä–æ—Å–∞")

@dp.message_handler(text="‚ÑπÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ä–æ—Å–æ–≤")
async def command_menus(message: types.Message):
    data = await Poll.filter(Poll.user_id==message.from_user.id)
    await message.answer(data, reply_markup=main.mainMenu)



@dp.message_handler(state = states.create_poll.CreatePoll.name)
async def process_translation(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text

    await states.create_poll.CreatePoll.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ")


@dp.message_handler(state = states.create_poll.CreatePoll.description)
async def process_translation(message: types.Message, state: FSMContext):
    await states.create_poll.CreatePoll.next()

    async with state.proxy() as data:
        data['description'] = message.text

    # await psycopg.commit_poll(name=data['name'], description=data['description'], owner_id=message.from_user.id)

    await message.reply('–ó–∞–≤–µ—Ä—à–µ–Ω–æ.', reply_markup=polls.pollsMenu)
    await state.finish()


@dp.message_handler(state = states.take_poll.TakePoll.id)
async def process_translation(message: types.Message, state: FSMContext):
    await states.take_poll.TakePoll.next()

    async with state.proxy() as data:
        data['id'] = message.text

    await message.reply('–ó–∞–≤–µ—Ä—à–µ–Ω–æ.', reply_markup=main.mainMenu)

    await state.finish()
